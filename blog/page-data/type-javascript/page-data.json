{"componentChunkName":"component---src-templates-blog-post-js","path":"/type-javascript/","result":{"data":{"site":{"siteMetadata":{"title":"Andy's Learning Journal"}},"markdownRemark":{"id":"747b198c-f4b0-5c5a-85a1-5ed6029b459b","excerpt":"Problem If you write JavaScript, the most common error is very likely to be something along the lines of \"Cannot read property 'foo' of undefined\". This happensâ€¦","html":"<h2>Problem</h2>\n<p>If you write JavaScript, the most common error is very likely to be something along the lines of <code>\"Cannot read property 'foo' of undefined\"</code>. This happens probably when you try to access <code>foo</code> attribute on an undefined variable (that you assumed should be defined).</p>\n<p>In fact, <a href=\"https://rollbar.com/blog/top-10-javascript-errors/\">7 out of 10 most common JavaScript errors are type errors</a></p>\n<p>Some of these errors has happened to me a million times and every time it happens, I almost know why it happened but cannot pinpoint the issue. It takes me between 10 seconds to 10 mins to figure out where the error comes from depending on the size of the code base. 10 seconds to 10 mins might not seem like a lot of time but it gets worse when the code base is large and logic is complex.</p>\n<p>Even worse, there might be some hidden data type bugs and you might not have a chance to see errors like this (since you are just guessing and hoping correct types will be passed around) before you ship the software to production. And some day you software crashes becuase you didn't consider all the test cases and corner cases and suddenly you have a lot more pressure and need to fix it urgently.</p>\n<h2>Solution(s)</h2>\n<p>Depending on the size of the software you are writing, adding a type system (and often some other stuff) on top of JavaScript can be a total overkill. For instance, this blog site that I built is 100% JavaScript (with Gatsby) and I am not planning to switch any time soon.</p>\n<p>However, if I want to build some more features into this site (e.g. turn it into a LMS) and as the code base gets bigger, I will consider using the following options.</p>\n<h3><a href=\"https://flow.org/en/docs/\">Flow</a></h3>\n<img width=\"70%\" style=\"max-width: 250px;\" alt=\"flow\" src=\"https://external-content.duckduckgo.com/iu/?u=http%3A%2F%2Fflow.org%2Fstatic%2Fogp-1200x630-1.png&amp;f=1&amp;nofb=1\">\n<ul>\n<li>Developed and backed by Facebook</li>\n<li>Written mainly in OCaml</li>\n<li>Relies on Babel</li>\n<li>Popular in React projects</li>\n</ul>\n<h4>Code Samples</h4>\n<pre><code class=\"language-js\">/* static type annotations */\n// @flow\nfunction square(n: number): number {\n  return n * n;\n}\nsquare('2'); // ----------> Error!\n</code></pre>\n<pre><code class=\"language-js\">/* type inference */\n// @flow\nfunction square(n) {\n  return n * n; // -------> Error!\n}\nsquare('2');\n</code></pre>\n<pre><code class=\"language-js\">/* type variance */\nclass General {}\nclass MoreSpecific extends General {}\nclass MostSpecific extends MoreSpecific {}\n\nclass BaseClass {\n  method(value: MoreSpecific): MoreSpecific { ... }\n}\n\n// More general type for input is good\nclass SubClass extends BaseClass {\n  method(value: General): MoreSpecific { ... }\n}\n\n// More specific type for output is good\nclass SubClass extends BaseClass {\n  method(value: MoreSpecific): MostSpecific { ... }\n}\n\n// Otherwise, more specific input or more general output is bad\n</code></pre>\n<pre><code class=\"language-js\">/* nominal (name based) or structure (shape based) */\n\n// nominal\nclass Foo {\n  method(input: string) {\n    /* ... */\n  }\n}\nclass Bar {\n  method(input: string) {\n    /* ... */\n  }\n}\nlet foo: Foo = new Bar(); // Error!\n\n// structure\nclass Foo {\n  method(input: string) {\n    /* ... */\n  }\n}\nclass Bar {\n  method(input: string) {\n    /* ... */\n  }\n}\nlet foo: Foo = new Bar(); // Works!\n\n// In flow,\n// functions and objects are structurally typed\n// Classes are nominally typed\n\n// ...many more \"features\"\n</code></pre>\n<h3><a href=\"https://www.typescriptlang.org/\">TypeScript</a></h3>\n<img width=\"50%\" style=\"max-width: 250px;\" alt=\"typescript\" src=\"https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fraw.githubusercontent.com%2Fremojansen%2Flogo.ts%2Fmaster%2Fts.png&amp;f=1&amp;nofb=1\">\n<ul>\n<li>Developed and backed by Microsoft</li>\n<li>Superset of JavaScript</li>\n<li>Has its compiler <code>tsc</code></li>\n<li>Popular in Angular/React projects</li>\n<li>Syntax similar to flow</li>\n</ul>\n<h3><a href=\"https://reasonml.github.io/\">ReasonML</a>/ReScript - A less known one</h3>\n<img width=\"50%\" style=\"max-width: 250px;\" alt=\"typescript\" src=\"https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Favatars1.githubusercontent.com%2Fu%2F20414525%3Fs%3D200%26v%3D4&amp;f=1&amp;nofb=1\">\n<blockquote>\n<p>ReScript is the language for folks who don't necessarily love JavaScript, but who still acknowledge its importance.</p>\n</blockquote>\n<ul>\n<li>Developed and backed by Facebook</li>\n<li>Subset of JavaScript, looks less like JavaScript compared to other options</li>\n<li>Relies on <a href=\"https://rescript-lang.org/docs/manual/latest/introduction\">ReScript</a> (previously BuckcleScript, initially developed by Bloomberg) to compile to <code>.js</code> files</li>\n<li>Uses Ninjs as its build system</li>\n<li>Messager.com is written in Reason</li>\n</ul>\n<h3>Difference to JavaScript (<a href=\"https://rescript-lang.org/docs/manual/latest/overview#common-features-js-output\">see it on their website</a>)</h3>\n<table>\n<thead>\n<tr>\n<th><strong>Feature</strong></th>\n<th><strong>Example</strong></th>\n<th><strong>JavaScript Output</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>String</td>\n<td><code>\"Hello\"</code></td>\n<td><code>\"Hello\"</code></td>\n</tr>\n<tr>\n<td>String Interpolation</td>\n<td><code>Hello ${message}</code></td>\n<td><code>\"Hello \" + message</code></td>\n</tr>\n<tr>\n<td>Character (disrecommended)</td>\n<td><code>'x'</code></td>\n<td><code>120 (char code)</code></td>\n</tr>\n<tr>\n<td>Integer</td>\n<td><code>23, -23</code></td>\n<td><code>23, -23</code></td>\n</tr>\n<tr>\n<td>Float</td>\n<td><code>23.0, -23.0</code></td>\n<td><code>23.0, -23.0</code></td>\n</tr>\n<tr>\n<td>Integer Addition</td>\n<td><code>23 + 1</code></td>\n<td><code>23 + 1</code></td>\n</tr>\n<tr>\n<td>Float Addition</td>\n<td><code>23.0 +. 1.0</code></td>\n<td><code>23.0 + 1.0</code></td>\n</tr>\n<tr>\n<td>Integer Division/Multiplication</td>\n<td><code>2 / 23 * 1</code></td>\n<td><code>2 / 23 * 1</code></td>\n</tr>\n<tr>\n<td>Float Division/Multiplication</td>\n<td><code>2.0 /. 23.0 *. 1.0</code></td>\n<td><code>2.0 / 23.0 * 1.0</code></td>\n</tr>\n<tr>\n<td>Float Exponentiation</td>\n<td><code>2.0 ** 3.0</code></td>\n<td><code>Math.pow(3, 4)</code></td>\n</tr>\n<tr>\n<td>String Concatenation</td>\n<td><code>\"Hello \" ++ \"World\"</code></td>\n<td><code>\"Hello \" + \"World\"</code></td>\n</tr>\n<tr>\n<td>Comparison</td>\n<td><code>>, &#x3C;, >=, &#x3C;=</code></td>\n<td><code>>, &#x3C;, >=, &#x3C;=</code></td>\n</tr>\n<tr>\n<td>Boolean operation</td>\n<td><code>!, &#x26;&#x26;, | |</code></td>\n<td><code>!, &#x26;&#x26;, | |</code></td>\n</tr>\n<tr>\n<td>Shallow and deep Equality</td>\n<td><code>===, ==</code></td>\n<td><code>===, ==</code></td>\n</tr>\n<tr>\n<td>List (disrecommended)</td>\n<td><code>list{1, 2, 3}</code></td>\n<td><code>{hd: 1, tl: {hd: 2, tl: {hd: 3, tl: 0}}}</code></td>\n</tr>\n<tr>\n<td>List Prepend</td>\n<td><code>list{a1, a2, ...oldList}</code></td>\n<td><code>{hd: a1, tl: {hd: a2, tl: theRest}}</code></td>\n</tr>\n<tr>\n<td>Array</td>\n<td><code>[1, 2, 3]</code></td>\n<td><code>[1, 2, 3]</code></td>\n</tr>\n<tr>\n<td>Record</td>\n<td><code>type t = {b: int}; let a = {b: 10}</code></td>\n<td><code>var a = {b: 10}</code></td>\n</tr>\n<tr>\n<td>Multiline Comment</td>\n<td><code>/* Comment here */</code></td>\n<td><code>Not in output</code></td>\n</tr>\n<tr>\n<td>Single line Comment</td>\n<td><code>// Comment here</code></td>\n<td><code>Not in output</code></td>\n</tr>\n</tbody>\n</table>","rawMarkdownBody":"\n## Problem\n\nIf you write JavaScript, the most common error is very likely to be something along the lines of `\"Cannot read property 'foo' of undefined\"`. This happens probably when you try to access `foo` attribute on an undefined variable (that you assumed should be defined).\n\nIn fact, [7 out of 10 most common JavaScript errors are type errors](https://rollbar.com/blog/top-10-javascript-errors/)\n\nSome of these errors has happened to me a million times and every time it happens, I almost know why it happened but cannot pinpoint the issue. It takes me between 10 seconds to 10 mins to figure out where the error comes from depending on the size of the code base. 10 seconds to 10 mins might not seem like a lot of time but it gets worse when the code base is large and logic is complex.\n\nEven worse, there might be some hidden data type bugs and you might not have a chance to see errors like this (since you are just guessing and hoping correct types will be passed around) before you ship the software to production. And some day you software crashes becuase you didn't consider all the test cases and corner cases and suddenly you have a lot more pressure and need to fix it urgently.\n\n## Solution(s)\n\nDepending on the size of the software you are writing, adding a type system (and often some other stuff) on top of JavaScript can be a total overkill. For instance, this blog site that I built is 100% JavaScript (with Gatsby) and I am not planning to switch any time soon.\n\nHowever, if I want to build some more features into this site (e.g. turn it into a LMS) and as the code base gets bigger, I will consider using the following options.\n\n### [Flow](https://flow.org/en/docs/)\n\n<img width=\"70%\" style=\"max-width: 250px;\" alt=\"flow\" src=\"https://external-content.duckduckgo.com/iu/?u=http%3A%2F%2Fflow.org%2Fstatic%2Fogp-1200x630-1.png&f=1&nofb=1\"/>\n\n- Developed and backed by Facebook\n- Written mainly in OCaml\n- Relies on Babel\n- Popular in React projects\n\n#### Code Samples\n\n```js\n/* static type annotations */\n// @flow\nfunction square(n: number): number {\n  return n * n;\n}\nsquare('2'); // ----------> Error!\n```\n\n```js\n/* type inference */\n// @flow\nfunction square(n) {\n  return n * n; // -------> Error!\n}\nsquare('2');\n```\n\n```js\n/* type variance */\nclass General {}\nclass MoreSpecific extends General {}\nclass MostSpecific extends MoreSpecific {}\n\nclass BaseClass {\n  method(value: MoreSpecific): MoreSpecific { ... }\n}\n\n// More general type for input is good\nclass SubClass extends BaseClass {\n  method(value: General): MoreSpecific { ... }\n}\n\n// More specific type for output is good\nclass SubClass extends BaseClass {\n  method(value: MoreSpecific): MostSpecific { ... }\n}\n\n// Otherwise, more specific input or more general output is bad\n```\n\n```js\n/* nominal (name based) or structure (shape based) */\n\n// nominal\nclass Foo {\n  method(input: string) {\n    /* ... */\n  }\n}\nclass Bar {\n  method(input: string) {\n    /* ... */\n  }\n}\nlet foo: Foo = new Bar(); // Error!\n\n// structure\nclass Foo {\n  method(input: string) {\n    /* ... */\n  }\n}\nclass Bar {\n  method(input: string) {\n    /* ... */\n  }\n}\nlet foo: Foo = new Bar(); // Works!\n\n// In flow,\n// functions and objects are structurally typed\n// Classes are nominally typed\n\n// ...many more \"features\"\n```\n\n### [TypeScript](https://www.typescriptlang.org/)\n\n<img width=\"50%\" style=\"max-width: 250px;\" alt=\"typescript\" src=\"https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fraw.githubusercontent.com%2Fremojansen%2Flogo.ts%2Fmaster%2Fts.png&f=1&nofb=1\"/>\n\n- Developed and backed by Microsoft\n- Superset of JavaScript\n- Has its compiler `tsc`\n- Popular in Angular/React projects\n- Syntax similar to flow\n\n### [ReasonML](https://reasonml.github.io/)/ReScript - A less known one\n\n<img width=\"50%\" style=\"max-width: 250px;\" alt=\"typescript\" src=\"https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Favatars1.githubusercontent.com%2Fu%2F20414525%3Fs%3D200%26v%3D4&f=1&nofb=1\"/>\n\n> ReScript is the language for folks who don't necessarily love JavaScript, but who still acknowledge its importance.\n\n- Developed and backed by Facebook\n- Subset of JavaScript, looks less like JavaScript compared to other options\n- Relies on [ReScript](https://rescript-lang.org/docs/manual/latest/introduction) (previously BuckcleScript, initially developed by Bloomberg) to compile to `.js` files\n- Uses Ninjs as its build system\n- Messager.com is written in Reason\n\n### Difference to JavaScript ([see it on their website](https://rescript-lang.org/docs/manual/latest/overview#common-features-js-output))\n\n| **Feature**                     | **Example**                          | **JavaScript Output**                      |\n| ------------------------------- | ------------------------------------ | ------------------------------------------ |\n| String                          | `\"Hello\"`                            | `\"Hello\"`                                  |\n| String Interpolation            | `Hello ${message}`                   | `\"Hello \" + message`                       |\n| Character (disrecommended)      | `'x'`                                | `120 (char code)`                          |\n| Integer                         | `23, -23`                            | `23, -23`                                  |\n| Float                           | `23.0, -23.0`                        | `23.0, -23.0`                              |\n| Integer Addition                | `23 + 1`                             | `23 + 1`                                   |\n| Float Addition                  | `23.0 +. 1.0`                        | `23.0 + 1.0`                               |\n| Integer Division/Multiplication | `2 / 23 * 1`                         | `2 / 23 * 1`                               |\n| Float Division/Multiplication   | `2.0 /. 23.0 *. 1.0`                 | `2.0 / 23.0 * 1.0`                         |\n| Float Exponentiation            | `2.0 ** 3.0`                         | `Math.pow(3, 4)`                           |\n| String Concatenation            | `\"Hello \" ++ \"World\"`                | `\"Hello \" + \"World\"`                       |\n| Comparison                      | `>, <, >=, <=`                       | `>, <, >=, <=`                             |\n| Boolean operation               | `!, &&,                              |                                            | ` | `!, &&, |  | ` |\n| Shallow and deep Equality       | `===, ==`                            | `===, ==`                                  |\n| List (disrecommended)           | `list{1, 2, 3}`                      | `{hd: 1, tl: {hd: 2, tl: {hd: 3, tl: 0}}}` |\n| List Prepend                    | `list{a1, a2, ...oldList}`           | `{hd: a1, tl: {hd: a2, tl: theRest}}`      |\n| Array                           | `[1, 2, 3]`                          | `[1, 2, 3]`                                |\n| Record                          | `type t = {b: int}; let a = {b: 10}` | `var a = {b: 10}`                          |\n| Multiline Comment               | `/* Comment here */`                 | `Not in output`                            |\n| Single line Comment             | `// Comment here`                    | `Not in output`                            |\n","frontmatter":{"title":"Type support for JS: When and Why","date":"August 26, 2020","description":"Short answer: the project can potentially grow much bigger and quality of the software is important"}}},"pageContext":{"slug":"/type-javascript/","previous":{"fields":{"slug":"/reusable-linter-config/"},"frontmatter":{"isActive":true,"title":"Create your first sharable eslint config"}},"next":null}},"staticQueryHashes":["1914652122","3000541721"]}