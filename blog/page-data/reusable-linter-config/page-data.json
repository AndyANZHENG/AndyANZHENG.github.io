{"componentChunkName":"component---src-templates-blog-post-js","path":"/reusable-linter-config/","result":{"data":{"site":{"siteMetadata":{"title":"Andy's Learning Journal"}},"markdownRemark":{"id":"8c038fc2-11cf-59d9-b08a-d7ae870d3fb8","excerpt":"Problem If you have been coding in JavaScript for a while, you might have done something that I always do before writing the first line of actual code - settingâ€¦","html":"<h2>Problem</h2>\n<p>If you have been coding in JavaScript for a while, you might have done something that I always do before writing the first line of actual code - setting up eslint and prettier. It does not take long but sometimes I wish I could use my old configs without having to go back my old repo, copying and pasting. Using it as a npm package might be the perfect solution. Here is how you can use your eslint config as a npm package with some flexibility.</p>\n<p>This is even more useful if you work in a team and you want everyone to share the same configurations.</p>\n<h2>End Result</h2>\n<pre><code class=\"language-json\">// .eslintrc in your new project root\n\n// your npm package is @yourscope/eslint-config\n{\n  \"extends\": [\n    \"@yourscope\" // same as @yourscope/eslint-config. eslint is smart enough to figure out the package name\n    \"@yourscope/eslint-config/react\" // only use react specific config\n    \"@yourscope/eslint-config/gatsby\" // only use gatsby specific config\n    \"@yourscope/eslint-config/&#x3C;anything>\" // &#x3C;anything> is up to your package structure\n  ]\n}\n</code></pre>\n<h2>Steps</h2>\n<ol>\n<li>Set up your eslint-config repo</li>\n<li>Publish it to npm</li>\n<li>Use it in your new project</li>\n</ol>\n<h3>1. Set up your eslint-config repo</h3>\n<p>1.0 Go npmjs.com to register an account. NPM username will be refered as <code>my-npm-username</code>.</p>\n<p>1.1 Create a directory and initialize the project</p>\n<pre><code class=\"language-bash\">mkdir eslint-config &#x26;&#x26; cd $_\nnpm init --scope=@my-npm-username -y\n</code></pre>\n<p>1.2 Install eslint and any config or plugin you may need. Let's just install eslint for now.</p>\n<pre><code class=\"language-bash\">npm i eslint\n</code></pre>\n<p>1.3 Write your configurations in <code>eslint-config/index.js</code></p>\n<pre><code class=\"language-js\">module.exports = {\n  rules: {\n    quotes: [2, 'single'],\n  },\n};\n</code></pre>\n<p>Now we here ready to publish it to npm.</p>\n<h3>2. Publish it to npm</h3>\n<p>run</p>\n<pre><code class=\"language-bash\">npm publish --access public\n</code></pre>\n<h3>3. Use it in your new project</h3>\n<p>Now go to your new project and install the npm package you just published (assuming that package.json exists).</p>\n<pre><code class=\"language-bash\">cd new-project\nnpm i @my-npm-username/eslint-config\n</code></pre>\n<pre><code class=\"language-js\">// In your .eslintrc\nmodule.exports = {\n  extends: ['@my-npm-username'],\n};\n</code></pre>\n<p>Congrats! Now if you need different configuration for another project, you can always add another file to <code>@my-npm-username/eslint-config</code> and export that file then use it with</p>\n<pre><code class=\"language-js\">extends: ['@my-npm-username/eslint-config/some-config']\n</code></pre>\n<h2>Read more</h2>\n<p><a href=\"https://eslint.org/docs/developer-guide/shareable-configs\">Eslint</a> has a more comprehensive guide on this if you are interested in a more comprehensive version of this.</p>\n<p>Also read more on publishing scoped npm package <a href=\"https://docs.npmjs.com/creating-and-publishing-scoped-public-packages\">here</a></p>","rawMarkdownBody":"\n## Problem\n\nIf you have been coding in JavaScript for a while, you might have done something that I always do before writing the first line of actual code - setting up eslint and prettier. It does not take long but sometimes I wish I could use my old configs without having to go back my old repo, copying and pasting. Using it as a npm package might be the perfect solution. Here is how you can use your eslint config as a npm package with some flexibility.\n\nThis is even more useful if you work in a team and you want everyone to share the same configurations.\n\n## End Result\n\n```json\n// .eslintrc in your new project root\n\n// your npm package is @yourscope/eslint-config\n{\n  \"extends\": [\n    \"@yourscope\" // same as @yourscope/eslint-config. eslint is smart enough to figure out the package name\n    \"@yourscope/eslint-config/react\" // only use react specific config\n    \"@yourscope/eslint-config/gatsby\" // only use gatsby specific config\n    \"@yourscope/eslint-config/<anything>\" // <anything> is up to your package structure\n  ]\n}\n```\n\n## Steps\n\n1. Set up your eslint-config repo\n2. Publish it to npm\n3. Use it in your new project\n\n### 1. Set up your eslint-config repo\n\n1.0 Go npmjs.com to register an account. NPM username will be refered as `my-npm-username`.\n\n1.1 Create a directory and initialize the project\n\n```bash\nmkdir eslint-config && cd $_\nnpm init --scope=@my-npm-username -y\n```\n\n1.2 Install eslint and any config or plugin you may need. Let's just install eslint for now.\n\n```bash\nnpm i eslint\n```\n\n1.3 Write your configurations in `eslint-config/index.js`\n\n```js\nmodule.exports = {\n  rules: {\n    quotes: [2, 'single'],\n  },\n};\n```\n\nNow we here ready to publish it to npm.\n\n### 2. Publish it to npm\n\nrun\n\n```bash\nnpm publish --access public\n```\n\n### 3. Use it in your new project\n\nNow go to your new project and install the npm package you just published (assuming that package.json exists).\n\n```bash\ncd new-project\nnpm i @my-npm-username/eslint-config\n```\n\n```js\n// In your .eslintrc\nmodule.exports = {\n  extends: ['@my-npm-username'],\n};\n```\n\nCongrats! Now if you need different configuration for another project, you can always add another file to `@my-npm-username/eslint-config` and export that file then use it with\n\n```js\nextends: ['@my-npm-username/eslint-config/some-config']\n```\n\n## Read more\n\n[Eslint](https://eslint.org/docs/developer-guide/shareable-configs) has a more comprehensive guide on this if you are interested in a more comprehensive version of this.\n\nAlso read more on publishing scoped npm package [here](https://docs.npmjs.com/creating-and-publishing-scoped-public-packages)\n","frontmatter":{"title":"Create your first sharable eslint config","date":"August 23, 2020","description":"Tired of setting up config file every single time you create a new project?"}}},"pageContext":{"slug":"/reusable-linter-config/","previous":null,"next":null}},"staticQueryHashes":["1914652122","3000541721"]}