<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Andy's Learning Journal]]></title><description><![CDATA[A blog written by an average engineer]]></description><link>https://andyan.dev</link><generator>GatsbyJS</generator><lastBuildDate>Tue, 12 Jan 2021 14:43:32 GMT</lastBuildDate><item><title><![CDATA[OCaml(JavaScript) => ReScript ?]]></title><description><![CDATA[Background So a few days ago when I am looking for a type system for JavaScript other than the well-known fast-growing TypeScript and also…]]></description><link>https://andyan.dev/try-rescript/</link><guid isPermaLink="false">https://andyan.dev/try-rescript/</guid><pubDate>Thu, 27 Aug 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;So a few days ago when I am looking for a type system for JavaScript other than the well-known fast-growing &lt;code&gt;TypeScript&lt;/code&gt; and also widely used &lt;code&gt;Flow&lt;/code&gt;, I found this interesting meta language called &lt;code&gt;ReasonML&lt;/code&gt;. Initially I thought it might have something to do &lt;code&gt;Reactjs&lt;/code&gt; as it was introduced at a react conf. It turns out that it has nothing to do &lt;code&gt;Reactjs&lt;/code&gt;. So what is it? As discribed on its &lt;a href=&quot;https://rescript-lang.org/docs/manual/latest/introduction&quot;&gt;website&lt;/a&gt;,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ReScript covers only a curated subset of JavaScript. For example, we emphasize plain data + functions over classes, clean pattern matching over fragile ifs and virtual dispatches, proper data modeling over string abuse, etc. JavaScript supersets will only grow larger over time; ReScript doesn&apos;t.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;On github wiki,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Our main goal is to provide the best compiler targeting JS platform.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So utimately ReScript is just a compile source for JavaScript that might help you improve quality of the code and the developer experience. Let&apos;s try to writing some simple programs with it.&lt;/p&gt;
&lt;h2&gt;Code&lt;/h2&gt;
&lt;h3&gt;Hello World&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;let f = (name) =&gt; Js.log(&quot;hello &quot; ++ name);

f() // ---------&gt; compiler error!
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  We&apos;ve found a bug for you!
  /home/andyan/Desktop/code/LEARN/rescript-101/src/helloWorld.re 3:2-3

  1 │ let f = (name) =&gt; Js.log(&quot;hello &quot; ++ name);
  2 │
  3 │ f()

  This has type:
    unit
  But somewhere wanted:
    string
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that here ReScript knows that name is supposed to be a string (type inference), and tell us what we should do. In TypeScript, compiler would have complained that &lt;code&gt;Parameter &apos;name&apos; implicitly has an &apos;any&apos; type&lt;/code&gt; and force you to give a type to name, which is kind of dumb in my option.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Type support for JS: When and Why]]></title><description><![CDATA[Problem If you write JavaScript, the most common error is very likely to be something along the lines of "Cannot read property 'foo' of…]]></description><link>https://andyan.dev/type-javascript/</link><guid isPermaLink="false">https://andyan.dev/type-javascript/</guid><pubDate>Wed, 26 Aug 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Problem&lt;/h2&gt;
&lt;p&gt;If you write JavaScript, the most common error is very likely to be something along the lines of &lt;code&gt;&quot;Cannot read property &apos;foo&apos; of undefined&quot;&lt;/code&gt;. This happens probably when you try to access &lt;code&gt;foo&lt;/code&gt; attribute on an undefined variable (that you assumed should be defined).&lt;/p&gt;
&lt;p&gt;In fact, &lt;a href=&quot;https://rollbar.com/blog/top-10-javascript-errors/&quot;&gt;7 out of 10 most common JavaScript errors are type errors&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Some of these errors has happened to me a million times and every time it happens, I almost know why it happened but cannot pinpoint the issue. It takes me between 10 seconds to 10 mins to figure out where the error comes from depending on the size of the code base. 10 seconds to 10 mins might not seem like a lot of time but it gets worse when the code base is large and logic is complex.&lt;/p&gt;
&lt;p&gt;Even worse, there might be some hidden data type bugs and you might not have a chance to see errors like this (since you are just guessing and hoping correct types will be passed around) before you ship the software to production. And some day you software crashes becuase you didn&apos;t consider all the test cases and corner cases and suddenly you have a lot more pressure and need to fix it urgently.&lt;/p&gt;
&lt;h2&gt;Solution(s)&lt;/h2&gt;
&lt;p&gt;Depending on the size of the software you are writing, adding a type system (and often some other stuff) on top of JavaScript can be a total overkill. For instance, this blog site that I built is 100% JavaScript (with Gatsby) and I am not planning to switch any time soon.&lt;/p&gt;
&lt;p&gt;However, if I want to build some more features into this site (e.g. turn it into a LMS) and as the code base gets bigger, I will consider using the following options.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;https://flow.org/en/docs/&quot;&gt;Flow&lt;/a&gt;&lt;/h3&gt;
&lt;img width=&quot;70%&quot; style=&quot;max-width: 250px;&quot; alt=&quot;flow&quot; src=&quot;https://external-content.duckduckgo.com/iu/?u=http%3A%2F%2Fflow.org%2Fstatic%2Fogp-1200x630-1.png&amp;amp;f=1&amp;amp;nofb=1&quot;&gt;
&lt;ul&gt;
&lt;li&gt;Developed and backed by Facebook&lt;/li&gt;
&lt;li&gt;Written mainly in OCaml&lt;/li&gt;
&lt;li&gt;Relies on Babel&lt;/li&gt;
&lt;li&gt;Popular in React projects&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Code Samples&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;/* static type annotations */
// @flow
function square(n: number): number {
  return n * n;
}
square(&apos;2&apos;); // ----------&gt; Error!
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;/* type inference */
// @flow
function square(n) {
  return n * n; // -------&gt; Error!
}
square(&apos;2&apos;);
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;/* type variance */
class General {}
class MoreSpecific extends General {}
class MostSpecific extends MoreSpecific {}

class BaseClass {
  method(value: MoreSpecific): MoreSpecific { ... }
}

// More general type for input is good
class SubClass extends BaseClass {
  method(value: General): MoreSpecific { ... }
}

// More specific type for output is good
class SubClass extends BaseClass {
  method(value: MoreSpecific): MostSpecific { ... }
}

// Otherwise, more specific input or more general output is bad
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;/* nominal (name based) or structure (shape based) */

// nominal
class Foo {
  method(input: string) {
    /* ... */
  }
}
class Bar {
  method(input: string) {
    /* ... */
  }
}
let foo: Foo = new Bar(); // Error!

// structure
class Foo {
  method(input: string) {
    /* ... */
  }
}
class Bar {
  method(input: string) {
    /* ... */
  }
}
let foo: Foo = new Bar(); // Works!

// In flow,
// functions and objects are structurally typed
// Classes are nominally typed

// ...many more &quot;features&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt;&lt;/h3&gt;
&lt;img width=&quot;50%&quot; style=&quot;max-width: 250px;&quot; alt=&quot;typescript&quot; src=&quot;https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fraw.githubusercontent.com%2Fremojansen%2Flogo.ts%2Fmaster%2Fts.png&amp;amp;f=1&amp;amp;nofb=1&quot;&gt;
&lt;ul&gt;
&lt;li&gt;Developed and backed by Microsoft&lt;/li&gt;
&lt;li&gt;Superset of JavaScript&lt;/li&gt;
&lt;li&gt;Has its compiler &lt;code&gt;tsc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Popular in Angular/React projects&lt;/li&gt;
&lt;li&gt;Syntax similar to flow&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href=&quot;https://reasonml.github.io/&quot;&gt;ReasonML&lt;/a&gt;/ReScript - A less known one&lt;/h3&gt;
&lt;img width=&quot;50%&quot; style=&quot;max-width: 250px;&quot; alt=&quot;typescript&quot; src=&quot;https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Favatars1.githubusercontent.com%2Fu%2F20414525%3Fs%3D200%26v%3D4&amp;amp;f=1&amp;amp;nofb=1&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;ReScript is the language for folks who don&apos;t necessarily love JavaScript, but who still acknowledge its importance.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Developed and backed by Facebook&lt;/li&gt;
&lt;li&gt;Subset of JavaScript, looks less like JavaScript compared to other options&lt;/li&gt;
&lt;li&gt;Relies on &lt;a href=&quot;https://rescript-lang.org/docs/manual/latest/introduction&quot;&gt;ReScript&lt;/a&gt; (previously BuckcleScript, initially developed by Bloomberg) to compile to &lt;code&gt;.js&lt;/code&gt; files&lt;/li&gt;
&lt;li&gt;Uses Ninjs as its build system&lt;/li&gt;
&lt;li&gt;Messager.com is written in Reason&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Difference to JavaScript (&lt;a href=&quot;https://rescript-lang.org/docs/manual/latest/overview#common-features-js-output&quot;&gt;see it on their website&lt;/a&gt;)&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Feature&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;JavaScript Output&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&quot;Hello&quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&quot;Hello&quot;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;String Interpolation&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Hello ${message}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&quot;Hello &quot; + message&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Character (disrecommended)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&apos;x&apos;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;120 (char code)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Integer&lt;/td&gt;
&lt;td&gt;&lt;code&gt;23, -23&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;23, -23&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Float&lt;/td&gt;
&lt;td&gt;&lt;code&gt;23.0, -23.0&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;23.0, -23.0&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Integer Addition&lt;/td&gt;
&lt;td&gt;&lt;code&gt;23 + 1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;23 + 1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Float Addition&lt;/td&gt;
&lt;td&gt;&lt;code&gt;23.0 +. 1.0&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;23.0 + 1.0&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Integer Division/Multiplication&lt;/td&gt;
&lt;td&gt;&lt;code&gt;2 / 23 * 1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;2 / 23 * 1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Float Division/Multiplication&lt;/td&gt;
&lt;td&gt;&lt;code&gt;2.0 /. 23.0 *. 1.0&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;2.0 / 23.0 * 1.0&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Float Exponentiation&lt;/td&gt;
&lt;td&gt;&lt;code&gt;2.0 ** 3.0&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Math.pow(3, 4)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;String Concatenation&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&quot;Hello &quot; ++ &quot;World&quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&quot;Hello &quot; + &quot;World&quot;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Comparison&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&gt;, &amp;#x3C;, &gt;=, &amp;#x3C;=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&gt;, &amp;#x3C;, &gt;=, &amp;#x3C;=&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Boolean operation&lt;/td&gt;
&lt;td&gt;&lt;code&gt;!, &amp;#x26;&amp;#x26;, | |&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;!, &amp;#x26;&amp;#x26;, | |&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Shallow and deep Equality&lt;/td&gt;
&lt;td&gt;&lt;code&gt;===, ==&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;===, ==&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;List (disrecommended)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;list{1, 2, 3}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;{hd: 1, tl: {hd: 2, tl: {hd: 3, tl: 0}}}&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;List Prepend&lt;/td&gt;
&lt;td&gt;&lt;code&gt;list{a1, a2, ...oldList}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;{hd: a1, tl: {hd: a2, tl: theRest}}&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Array&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[1, 2, 3]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[1, 2, 3]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Record&lt;/td&gt;
&lt;td&gt;&lt;code&gt;type t = {b: int}; let a = {b: 10}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;var a = {b: 10}&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Multiline Comment&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/* Comment here */&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Not in output&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Single line Comment&lt;/td&gt;
&lt;td&gt;&lt;code&gt;// Comment here&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Not in output&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content:encoded></item><item><title><![CDATA[Create your first sharable eslint config]]></title><description><![CDATA[Problem If you have been coding in JavaScript for a while, you might have done something that I always do before writing the first line of…]]></description><link>https://andyan.dev/reusable-linter-config/</link><guid isPermaLink="false">https://andyan.dev/reusable-linter-config/</guid><pubDate>Sun, 23 Aug 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Problem&lt;/h2&gt;
&lt;p&gt;If you have been coding in JavaScript for a while, you might have done something that I always do before writing the first line of actual code - setting up eslint and prettier. It does not take long but sometimes I wish I could use my old configs without having to go back my old repo, copying and pasting. Using it as a npm package might be the perfect solution. Here is how you can use your eslint config as a npm package with some flexibility.&lt;/p&gt;
&lt;p&gt;This is even more useful if you work in a team and you want everyone to share the same configurations.&lt;/p&gt;
&lt;h2&gt;End Result&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;// .eslintrc in your new project root

// your npm package is @yourscope/eslint-config
{
  &quot;extends&quot;: [
    &quot;@yourscope&quot; // same as @yourscope/eslint-config. eslint is smart enough to figure out the package name
    &quot;@yourscope/eslint-config/react&quot; // only use react specific config
    &quot;@yourscope/eslint-config/gatsby&quot; // only use gatsby specific config
    &quot;@yourscope/eslint-config/&amp;#x3C;anything&gt;&quot; // &amp;#x3C;anything&gt; is up to your package structure
  ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Steps&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Set up your eslint-config repo&lt;/li&gt;
&lt;li&gt;Publish it to npm&lt;/li&gt;
&lt;li&gt;Use it in your new project&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;1. Set up your eslint-config repo&lt;/h3&gt;
&lt;p&gt;1.0 Go npmjs.com to register an account. NPM username will be refered as &lt;code&gt;my-npm-username&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;1.1 Create a directory and initialize the project&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;mkdir eslint-config &amp;#x26;&amp;#x26; cd $_
npm init --scope=@my-npm-username -y
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;1.2 Install eslint and any config or plugin you may need. Let&apos;s just install eslint for now.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm i eslint
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;1.3 Write your configurations in &lt;code&gt;eslint-config/index.js&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;module.exports = {
  rules: {
    quotes: [2, &apos;single&apos;],
  },
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we here ready to publish it to npm.&lt;/p&gt;
&lt;h3&gt;2. Publish it to npm&lt;/h3&gt;
&lt;p&gt;run&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm publish --access public
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;3. Use it in your new project&lt;/h3&gt;
&lt;p&gt;Now go to your new project and install the npm package you just published (assuming that package.json exists).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cd new-project
npm i @my-npm-username/eslint-config
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// In your .eslintrc
module.exports = {
  extends: [&apos;@my-npm-username&apos;],
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Congrats! Now if you need different configuration for another project, you can always add another file to &lt;code&gt;@my-npm-username/eslint-config&lt;/code&gt; and export that file then use it with&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;extends: [&apos;@my-npm-username/eslint-config/some-config&apos;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Read more&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://eslint.org/docs/developer-guide/shareable-configs&quot;&gt;Eslint&lt;/a&gt; has a more comprehensive guide on this if you are interested in a more comprehensive version of this.&lt;/p&gt;
&lt;p&gt;Also read more on publishing scoped npm package &lt;a href=&quot;https://docs.npmjs.com/creating-and-publishing-scoped-public-packages&quot;&gt;here&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[The Hardest Thing To Do (for me, as a human)]]></title><description><![CDATA[To my younger self, Having genuine interests or passion for something or many things is a great thing. But once you are passionate about…]]></description><link>https://andyan.dev/hardest-thing-to-do/</link><guid isPermaLink="false">https://andyan.dev/hardest-thing-to-do/</guid><pubDate>Tue, 28 Jul 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;To my younger self,&lt;/p&gt;
&lt;p&gt;Having genuine interests or passion for something or many things is a great thing. But once you are passionate about something, does that mean you will be good at it? Or even able to make a living off it? Maybe. Maybe not.&lt;/p&gt;
&lt;p&gt;I grew up having interests in a lot of things, ping pong (not surprisingly as a Chinese), basketball, dancing, solving rubik&apos;s cube, etc. But over the years I learned that it was almost impossible for me to keep being passionate about the same thing for a long time. I might intensively learn how to a rubik&apos;s cube in 2 weeks and get to a point where I can show off to my classmate and be kind of proud of myself. Then I will stop. Maybe move onto something else. Maybe never pick up a rubik&apos;s cube again. It is totally fine for small hobbies like that because we have many other things to try. But while I was thinking that, I was approaching graduation in high school and still did not what I should do for a living. Perfect way to put this will be that I kind of like doing A, but I cannot do A forever, nor do I think that I am talented. Then after a blink of an eye, I graduated university and started working. When in university, one thing I was certain about was that I sucked at education psychology and anything that requires me to memorize ton of text. Also, when it came to science subject, I was (or forced myself to be) kind of interested in every concept first but I did terrible in tests. There was no dedication or spirit in me that told me just do what it takes, like it or not.&lt;/p&gt;
&lt;p&gt;Essentially the world does not care if you are passionate about something. Put in the work. Get what you want. Maybe you will like the process. Maybe you will hate the process. If you don&apos;t feel like doing the thing you are supposed to do, think like a machine. Don&apos;t be scammed by the 0.001% actual passionate people&apos;s talk about having to be 24/7 excited about the same thing to be successful.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Why Blogs?]]></title><description><![CDATA[As I am typing the first sentence of my first blog ever, I still cannot believe it that I am doing something I absolutely hated when I was…]]></description><link>https://andyan.dev/why-blogs/</link><guid isPermaLink="false">https://andyan.dev/why-blogs/</guid><pubDate>Thu, 23 Jul 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;As I am typing the first sentence of my first blog ever, I still cannot believe it that I am doing something I absolutely hated when I was young. Writing was never my thing and I sucked at it. Maybe there was too much pressure and the goal was too clear - getting a good score to make parents proud. That 600 or 800 words requirement was my worst nightmare.&lt;/p&gt;
&lt;p&gt;Last time I considered writing blogs was 3 years ago. I even set up a WordPress website and bought a domain on Bluehost. It was stupid that I paid that much money for a CMS with many fancy features only few of which are actually useful for me. I did not know what I was doing and I did not even publish one blog with it as I lost interests. Nowadays I would much prefer a minimal site but with great extensibility and most importantly, as cheap as possible. I guess that is because skills and knowledge give me the freedom or ability to do it in the exact way I want and same with many other things. It also saves A LOT of money. (Running a site like this is almost for free. Just need to pay for a domain such as &lt;code&gt;andyan.dev&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;Later I may reflect on things that I often think about but never had a chance to talk about, write about memorable time I spent with other people, or some technology I am interested in.&lt;/p&gt;
&lt;p&gt;Maybe I will add a comment section later. Maybe also a dark theme switcher. Maybe...&lt;/p&gt;</content:encoded></item></channel></rss>