{"componentChunkName":"component---src-templates-handout-js","path":"/handout/events","webpackCompilationHash":"e1965144255e1af5a5e7","result":{"data":{"markdownRemark":{"rawMarkdownBody":"# DOM Events\n\n## Learning objectives\n\n- Understand the benefits of events\n- Listen for events and stop listening for events\n\n## Events\n\nIn order to create interactive and responsive sites, we need to respond to user actions and update the DOM accordingly.\n\nFor example, when a user clicks on our site’s button something should happen in response to that.   Or if the user hovers over a section of the page it should either change colour or have some sort of reaction.   In order to help us figure out what the user is reacting to, there should be a constant flow of action reports.   These reports are called events.\n\nA very common event is the `click` event, which is fired every time a user clicks.   We can attach an event handler to DOM elements.   These handlers listen for a specific event and perform a function once the event occurs.   So we can attach a click event handler to an element, if the user clicks on that element an action is performed.\n\n```js\nvar elem = document.getElementById('title');\nelem.onclick = function() {\n  alert('I was clicked'); // every time the user clicks on title an alert will pop up\n};\n\n// another option is eventListeners\nelem.addEventListener('mouseover', function() {\n  alert('I was hovered');\n});\n```\n\nFor additional information regarding JavaScript Events watch this [video](https://youtu.be/bf_9IeihQ0M).\n\n## Some useful Events\n\n`click`\n\nWhen the button (usually a mouse button) is pressed and released on a single element.\n\n`keydown`\n\nWhen the user first presses a key on the keyboard\n\n`keyup`\n\nWhen the user releases a key on the keyboard\n\n`submit`\n\nWhen the user submits a form\n\n`load`\n\nWhen the page has finished loading\n\n`resize`\n\nWhen the browser window has been resized\n\n`scroll`\n\nWhen the user scrolls up or down on a page\n\n`mouseenter`\n\nWhen the user’s mouse enters an element\n\n`mouseleave`\n\nWhen the user’s mouse leaves an element\n\nA complete list of all DOM events can be found [here](https://developer.mozilla.org/en-US/docs/Web/Events)\n\n## Event object\n\nOnce an event is called with the `addEventListener` method, it is passed an event object, which contains useful information about the event.   For example if you attached an event to all `<p>` tags, you might still want to know which of the `<p>` tags was clicked.   This information can be found in the event handler.\n\n```js\nvar para = document.getElementsByTagName('p');\nfor (var i = 0; i < para.length; i++) {\n  para[i].addEventListener('click', function(e) {\n    console.log('I was clicked' + e.target);\n  });\n}\n```\n\nNotice how the event object was included using the `e` parameter declaration in the function above.\n\n### Useful event object properties / methods\n\n`timeStamp`\n\nReturns the time (in milliseconds relative to the epoch) at which the event was created\n\n`type`\n\nReturns the name of the event\n\n`preventDefault()`\n\nCancels the event if it is cancelable, meaning that the default action that belongs to the event will not occur\n\n`stopImmediatePropagation()`\n\nPrevents other listeners of the same event from being called\n\n`stopPropagation()`\n\nPrevents further propagation of an event during event flow\n\n`buttons`\n\nReturns which mouse buttons were pressed when the mouse event was triggered\n\n`clientX`\n\nReturns the horizontal coordinate of the mouse pointer, relative to the current window, when the mouse event was triggered\n\n`clientY`\n\nReturns the vertical coordinate of the mouse pointer, relative to the current window, when the mouse event was triggered\n\n`pageX`\n\nReturns the horizontal coordinate of the mouse pointer, relative to the document, when the mouse event was triggered\n\n`pageY`\n\nReturns the vertical coordinate of the mouse pointer, relative to the document, when the mouse event was triggered\n\n`key`\n\nReturns the key value of the key represented by the event\n\nA complete list can be found [here](https://www.w3schools.com/jsref/dom_obj_event.asp).\n\n## Removing event handlers\n\nIf you can add event handlers you will also need to remove them, especially if you add them via functions, you will quickly end up with several event handlers listening for the same event. It is therefore important that you remove them once you don’t need them anymore.\n\nTo remove eventListeners you can use `removeEventListener()`\n\n```js\nvar image = document.getElementById('image');\n\nvar action = function() {\n  console.log('user clicked on image');\n  image.removeEventListener('click', action);\n};\nvar event = image.addEventListener('click', action);\n```\n\n## Exercise\n\n### Flower shop plus (with JavaScript)\n\nLet’s go back to our little website we coded in the HTML / CSS introduction. See picture below for inspiration:\n\n- Once the user hovers over the 4 icons, they should increase in size by 40%, once the users mouse leaves the icons their size should decrease to normal again\n- Make the Learn More button clickable. Once the user clicks on it:\n  1. Remove the black overlay so that we can see the flowers clearly.\n  2. Change the title from ‘beautiful flowers’ to ‘welcome to my flower shop’, give the text a background and change the color to blue.\n  3. Change the text of the button from ‘learn more’ to ‘buy flowers’, change the background color to red.\n- Additionally to this, create an element which is hidden when the user first loads the page, but when the button is pressed revel the element, this element should contain at least two images of flower arrangements and the prices for them.\n\nBonus\n\nIf you can change the documents style with a button, try to change it back when the user clicks the button again.\n\nThis is what it should look like when the user clicks the button for the first time:\n\n<img src=\"../img/flowershop_js.png\" width=\"100%\"/>\n"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"fileAbsolutePath":"/Users/Andy/Desktop/code/PROJECTS/xccelerate/ptcb-site/src/data/week_5/events.html.turndown.md","title":"events"}}}