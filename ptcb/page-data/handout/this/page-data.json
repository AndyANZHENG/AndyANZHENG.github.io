{"componentChunkName":"component---src-templates-handout-js","path":"/handout/this","webpackCompilationHash":"66243cc722f6fbf5bff1","result":{"data":{"markdownRemark":{"rawMarkdownBody":"# this\n\n## Learning objectives\n\n- Understand the contextual nature of  `this`\n- Be able to use `this`\n\n## this keyword\n\nAs you might remember, we can define functions within objects (known as methods). When we can call methods they access the properties of the object that they belong to. To access these properties we use the this key to declare the object's property. The this keyword is very contextual and will usually refer to the object that it is associated with.\n\n```js\nvar dog = {\n  nickname: 'Benji',\n  call() {\n    console.log('Come here ' + this.nickname);\n    // by calling this.nickname here, we can access the nickname properties\n    // of the object dog\n  }\n};\ndog.call(); // logs 'Come here Benji'\n```\n\nLet’s take a step back and look closer at the `this` keyword…\n\n---\n\n## Using this within the object declaration\n\n```js\nvar dog = {\n  nickname: 'Benji',\n  whatIsThis() {\n    // we're inside the object declaration\n    console.log(this);\n  },\n  call() {\n    // also inside the object declaration\n    console.log(this.nickname);\n  }\n};\ndog.whatIsThis(); // { nickname: 'Benji', call: [Function: call] }\ndog.call(); // 'Benji'\n```\n\nThe value of `this` is the object `{nickname:’Benji’, call: Function: call}` hence why this.nickname logs `Benji`\n\n---\n\n## When this refers to the global object\n\nUsing `this` we are able to access the property nickname from the same object.\n\nIf you use `this` outside of an object declaration it refers to the global object. Below are two examples:\n\n```js\nvar globalVariable = \"I'm so global\";\n\nthis.globalVariable; // returns \"I'm so global\" because it's a 'property' of the global object\n\n// Usually we just ignore 'this' keyword when we call global variables\nglobalVariable; // also returns \"I'm so global\"\n\n// in Node:\nvar obj = {\n  exampleProperty: 10,\n  exampleMethod() {\n    // here we're inside the object declaration\n    function exampleFunction() {\n      // we're outside of the object declaration\n      console.log(this === global); // as a result 'this' refers to the global object\n    }\n    exampleFunction();\n  }\n};\nobj.exampleFunction(); // true, this is equal to the global object\n\n// in browser:\nvar obj = {\n  exampleProperty: 10,\n  exampleMethod() {\n    // here we're inside the object declaration\n    function exampleFunction() {\n      // we're outside of the object declaration\n      console.log(this === window); // as a result 'this' refers to the window object\n    }\n    exampleFunction();\n  }\n};\nobj.exampleFunction(); // true , this is equal to the window object\n```\n\n---\n\n## The problem with the ‘this’ object and inner functions\n\nGoing back to the dog example, we can demonstrate how you can easily make a mistake while using `this`.\n\n```js\nvar dog = {\n  nickname: 'Benji',\n  call() {\n    console.log('first call nickname is showing => ' + this.nickname);\n    function secondCall() {\n      console.log('second call nickname is undefined => ' + this.nickname);\n    }\n    secondCall();\n  }\n};\n\ndog.call();\n// logs \"first call nickname is showing => Benji\"\n// logs \"second call nickname is undefined => undefined\"\n```\n\nIn the first console.log, the nickname Benji is correctly showing. But in the second console.log that is run by the secondCall method, the nickname is undefined!\n\nWhy does this happen?\n\n- LINE 3: `call()` is a method of the dog object, so this will refer to the dog object\n- LINE 6: The `call()` method creates an inner function called `secondCall()` which has its own scope. (Scope is extremerly important while using the 'this' keyword.\n- Within the scope of the `secondCall()` method, this *no longer* refers to the dog object, in fact it refers to the global object.\n- The `call()` method did not pass the dog object along to the `secondCall()` function. This means `secondCall()` does not have access to the properties of the dog object!\n\nHow can we solve this?\n\n---\n\n## Passing the `this` object to an inner function\n\n```js\nvar dog = {\n  nickname: 'Benji',\n  call() {\n    var props = this;\n    function secondCall() {\n      console.log('Come here' + props.nickname);\n    }\n    secondCall();\n  }\n};\ndog.call(); // logs 'Come here Benji'\n```\n\nThe nickname Benji is showing properly! So what did we do here?\n\n- We store the `this` object in a local variable\n- The inner function `secondCall()` can “see” the props variable because `props` and `secondCall()` are declared within the `call()` function\n- So ‘Benji’ can be accessed using `props.nickname`\n\n---\n\nRemember: `this` is used inside a function (let’s say function A) and it contains the value of the object that invokes function A. We need 'this' to access methods and properties of the object that invokes function A, especially since we don’t always know the name of the invoking object, and sometimes there is no name to use to refer to the invoking object.\n\nIf you need to watch something to solidify your understanding watch it [here](https://youtu.be/yVdU2coJ1VQ).\n\nFor an in-depth article about `this` [head over here](http://javascriptissexy.com/understand-javascripts-this-with-clarity-and-master-it).\n"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"fileAbsolutePath":"/Users/Andy/Desktop/code/PROJECTS/xccelerate/ptcb-site/src/data/week_5_events/this.html.turndown.md","title":"this"}}}