{"componentChunkName":"component---src-templates-handout-js","path":"/handout/css","webpackCompilationHash":"66243cc722f6fbf5bff1","result":{"data":{"markdownRemark":{"rawMarkdownBody":"# CSS\n\nCSS stands for ‘Cascading Style Sheets’ which helps us design and structure a webpage. It is usually written in a separate file which is linked to the HTML document. It is a style sheet language used for describing the presentation of a document written in a markup language. Although most often used to set the visual style of web pages and user interfaces written in HTML and XHTML, CSS can be applied to any XML document.\n\nThe separation of HTML from CSS makes it easier to maintain sites, share style sheets across pages, and tailor pages to different environments.\n\n## Learning Objectives\n\nAfter completing this section you should understand\n\n- how to give that website styling through CSS\n  - the box model\n  - flexbox\n\n## Styling with CSS\n\nLet’s do some quick changes to the code from our previous HTML example:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>My page</title>\n    <link rel=\"stylesheet\" href=\"stylesheet.css\" />\n  </head>\n  <body>\n    <div class=\"container\">\n      <header>\n        <h1>Welcome to my page</h1>\n      </header>\n      <section>\n        <div class=\"navigation\">\n          <h3>Navigate my page</h3>\n          <ul>\n            <li><a href=\"/index.html\" class=\"link\">Home</a></li>\n            <li><a href=\"/about.html\" class=\"link\">About</a></li>\n          </ul>\n        </div>\n        <div class=\"content\">\n          <h2>Text about me</h2>\n          <p>\n            Roof party fap synth meh bushwick. Stumptown cray farm-to-table\n            celiac marfa, ugh chillwave DIY everyday carry. Seitan wolf\n            taxidermy fanny pack, gastropub activated charcoal la croix bitters.\n            Four dollar toast umami echo park post-ironic pop-up man braid.\n            Try-hard normcore tofu, chartreuse next level mlkshk gluten-free\n            chicharrones prism vegan glossier seitan health goth banjo.\n          </p>\n        </div>\n      </section>\n    </div>\n  </body>\n</html>\n```\n\n### What have we just changed?\n\nNotice the `<link>` tag below the `<title>` tag. This creates a connection between our HMTL file and a CSS file, which will include all our stylings.\n\nWe have also given some elements `id` or `class` information. This will come in handy when we try to identify an element to style it. You generally give an element an `id` if it only appears once in the HTML document, if it appears several times give it a `class`.\n\nNotice how we replaced some of the `<div>` with other tags like `<header>` or `<section>`. That is just good HTML5 practice and not necessarily needed, we could have easily given those elements a class or id instead.\n\n### The stylesheet\n\n```css\nbody {\n  background-color: #9b9b9b;\n}\n\n.container {\n  width: 800px;\n  margin: auto;\n  background-color: white;\n}\n\nheader {\n  text-align: center;\n  padding-top: 20px;\n}\n\nsection {\n  display: flex;\n}\n\n.navigation {\n  width: 30%;\n  padding-left: 30px;\n}\n\n.content {\n  width: 60%;\n}\n\n.link {\n  color: red;\n}\n```\n\nIf we link the stylesheet above with our HTML page we get the following result:\n\n![css_basic](/ptcb/img/css_basic.png)\n\nAs you can see we targeted different elements in a different way. If we targeted all elements of a type, we used the element name, like `body` or `section`. To target elements with an id we addressed them with a hashtag `#` like `#navigation` while elements with a class were targeted with a dot `.` like `.link`.\n\nThere are many, many ways to style an element, most of them are self explanatory. Lets just look at a few things.\n\n### The most common CSS properties\n\n`color`\n\nSets the color of text\n\n`opacity`\n\nSets the opacity level for an element\n\n`background-color`\n\nSpecifies the background color of an element\n\n`background-image`\n\nSpecifies one or more background images for an element\n\n`border`\n\nSets border thickness, style, color in one declaration\n\n`border-radius`\n\nA shorthand property for setting all the four border-\\*-radius properties\n\n`clear`\n\nSpecifies which sides of an element where other floating elements are not allowed\n\n`clip`\n\nClips an absolutely positioned element\n\n`display`\n\nSpecifies how a certain HTML element should be displayed\n\n`float`\n\nSpecifies whether or not a box should float\n\n`height`\n\nSets the height of an element\n\n`margin`\n\nSets all the margin properties in one declaration\n\n`overflow-x`\n\nSpecifies whether or not to clip the left/right edges of the content, if it overflows the element’s content area\n\n`overflow-y`\n\nSpecifies whether or not to clip the top/bottom edges of the content, if it overflows the element’s content area\n\n`padding`\n\nSets all the padding properties in one declaration\n\n`position`\n\nSpecifies the type of positioning method used for an element (static, relative, absolute or fixed)\n\n`visibility`\n\nSpecifies whether or not an element is visible\n\n`width`\n\nSets the width of an element\n\nFor the complete list check out the W3school documentation on [CSS](https://www.w3schools.com/cssref/default.asp)\n\n### Box Model\n\n![box_model](/ptcb/img/box_model.png)\n\nEvery element on the page is structured according to the same principle. They are always a rectangular box that can be tweaked to change the styling.\n\n`width` and `height` set the width and height of the content box. `padding` is the inner margin of a CSS box. You can either style all four sides equally or set individual paddings through `padding-left`, `padding-bottom` etc. The padding clears an area around the content (inside the border) of an element. With CSS, you have full control over the padding. There are CSS properties for setting the padding for each side of an element (top, right, bottom, and left).   \n`border` sits between the padding and margin and can be styled individually. By default it has a width of 0px, but you can change the border thickness, style and color. The properties that can be set, are (in order): border-width, border-style, and border-color. It does not matter if one of the values above are missing, e.g. border:solid #ff0000; is allowed.  \n`margin` represents the outer area of the CSS box. Again all margin sides can be styled individually.\n\nTo learn more about the box model check out this short [video](https://youtu.be/d601NaSSqSE).\n\n### Floating\n\nPositioning is one of the most important aspects of CSS. You can use CSS to correctly position your elements on the page. One way to achieve this is through using float. Watch these two introduction videos:\n\n- [Floating Elements](https://youtu.be/VwxGKpvW8Zk)\n- [Clearing Floats](https://youtu.be/nE9lIRbIfI0)\n\nA handy summary of the code used in the videos can be found here [CSS Tricks](https://css-tricks.com/all-about-floats/).\n\n#### Exercise\n\nD\n\nUsing Float try to reproduce this image below. Create three divs with a width and height of 100px. Color the boxes and position them accordingly.\n\n![float_exercise](/ptcb/img/float_exercise.png)\n\n### Flexbox\n\nOne of the coolest additions to the newest version of CSS is the Flexbox Layout. It allows us to easily move several elements inline and center them if we want. It is all a bit easier than using float. In the above example we aligned the navigation field and the content on one line with the command `display: flex`. The real power of flexbox only comes out when you start developing responsive (mobile friendly) websites as flexbox allows the elements to adjust to changes in the page size of the device it is on.\n\nTo learn more about flexbox you can play a little game, see how many frogs you manage to move around.\n\n[Flexbox Froggy - A game for learning CSS flexbox](https://flexboxfroggy.com/)\n\nThere is also a handy guide [CSS Tricks](https://css-tricks.com/snippets/css/a-guide-to-flexbox/).\n\n#### Bonus exercise\n\nE\n\nTry to reproduce the image from the floating exercise using flexbox.\n\n## Viewport\n\nOnce you want to make your website mobile ready, you will notice that many websites may look totally zoomed out and off. To fix that we can include the [viewport](https://developer.mozilla.org/en/docs/Mozilla/Mobile/Viewport_meta_tag) inside the `<head>` tag of our html file.\n\n```html\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n```\n\nThe code above sets the viewport width to the width of the screen, with a scale of 100%. That prevents a mobile phone browser from scaling down the website to fit on a screen.\n\nSee the difference:\n\n![viewport](/ptcb/img/viewport.png)\n\n## Additional Resources\n\nTo solidify what we’ve just learnt in the HTML and CSS, watch Jake’s video as he takes you through the whole process of designing a simple webpage.\n\n- [Jakes Website with simple CSS](https://youtu.be/0afZj1G0BIE)\n\nIf you still fee uncomfortable with CSS, Net Ninja has more videos about positioning with CSS.\n\n- [Net Ninja CSS positioning tutorial](https://youtu.be/7ZXsPj43heo?list=PL4cUxeGkcC9hudKGi5o5UiWuTAGbxiLTh)\n\nTo learn more about HTML tags you can look at the guide from [W3school](https://www.w3schools.com/html/default.asp)\n\nTo learn more about CSS properties you can look at the guide from [W3school](https://www.w3schools.com/css/default.asp)\n\n## Challenge\n\nF\n\nYou just landed your first job as a front-end developer. Help a little flower shop code their landing page. Luckily they already hired a designer, so you only need to take care of the coding. You will find all the necessary images [here](https://drive.google.com/open?id=1RGVi9qdL0lqyoCtkg3MVccNDwSBnwuLe).\n\nCopy this design\n\nYou will need an index.html file and a css stylesheet, please link your stylesheet and index within the index.html's head.  \n![flowershop_design](/ptcb/img/flowershop_design.png)\n\n## Bonus Challenge\n\nMake the flowershop website mobile ready. To make it truly mobile ready you will have to adjust the design, come up with a clever way to display the content. You will probably want to look at [`@media`](https://www.w3schools.com/cssref/css3_pr_mediaquery.asp).\n"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"fileAbsolutePath":"/Users/Andy/Desktop/code/PROJECTS/xccelerate/ptcb-site/src/data/week_1_installation&basics/css.html.turndown.md","title":"css"}}}