{"componentChunkName":"component---src-templates-handout-js","path":"/handout/document-object-model","webpackCompilationHash":"120eff7861651eebdd09","result":{"data":{"markdownRemark":{"rawMarkdownBody":"# The DOM\n\n## Learning objectives\n\n- Understand the concept of DOM\n- Understand how to access and manipulate DOM element using JavaScript\n\n## The Document Object Model\n\nThe Document Object Model (DOM) is an Object with the HTML structure of a web page provided by the browser. The HTML structure of a web page can be imagined as a tree, where every element has a parent element and possibly child elements. Only that we don’t call them elements but nodes.\n\nEvery node has a few properties which we can access. For example every node has [`parentNode`](https://developer.mozilla.org/en-US/docs/Web/API/Node/parentNode) and [`children`](https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/children)(returns an array with children) property. These can be used to move along the node tree, also called traversing.\n\nThe DOM allows us to access these nodes after a webpage has been loaded, an item has been changed or manipulated. Almost anything that changes dynamically on webpages, is achieved through DOM manipulation.\n\nFor additional information regarding the DOM and how it works, watch this video [here](https://youtu.be/H63dVFDuJDM).\n\n## Accessing elements on the DOM\n\nThe DOM has a few methods which come in very handy when trying to access the nodes (elements of a page).\n\n- [`document.getElementById`](https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById) - returns the element with a specific id or `null` if none is specified\n- [`document.getElementsByTagName`](https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByTagName) - returns an array of elements with the tag\n- [`document.getElementsByClassName`](https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByClassName) - returns an array of elements with given class\n\nSee the example below, in the script tag\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>Sample Page</title>\n  </head>\n  <body>\n    <h1>My Homepage</h1>\n    <div class=\"content-section\">\n      <p>\n        I'm a paragraph\n      </p>\n    </div>\n    <div class=\"content-section\">\n      <h3>Section Heading</h3>\n      <p>\n        Another paragraph\n      </p>\n      <div id=\"info-field\">\n        <p>\n          some info\n        </p>\n      </div>\n    </div>\n    <script>\n      document.getElementById('info-field'); //returns <div id=\"info-field\"><p>some info</p></div>\n      document.getElementsByClassName('content-section'); //returns <div class=\"content-section\">...</div>,                                                                         <div class=\"content-section\">...</div>\n      document.getElementsByTagName('h3'); //returns <h3>Section Heading</h3>\n    </script>\n  </body>\n</html>\n```\n\nFor more information about DOM manipulation watch this [link here](https://youtu.be/SowaJlX1uKA).\n\n## Exercise\n\nH\n\nCan you access the `<p>` tag in `<div id=\"info-field\">` tag from the example above? Copy and paste the DOM selectors you wrote to access your DOM elements, into a js file that you will upload to GitHub.\n\n## Manipulating the DOM\n\nTo change elements on a page, we use a process called DOM manipulation. First we need to access the element, through one of the methods showed above. Then we edit the element. We usually edit the element’s `style` (CSS) or HTML (content).\n\nTo change the styling we can use the `style` property that every element possesses. It is an object representing the current values of the element’s style. Changing these properties is just similar to changing properties on any other object.\n\n```javascript\nvar element = document.getElementById('navbar');\n\nelement.style.width = '1000px';\nelement.style.backgroundColor = 'blue';\nelement.style.display = 'flex';\n```\n\nNotice how the styling names are just like the CSS names. Although while in CSS two words are separated by a ‘-‘ like `background-color`, when manipulating the DOM they are written in camelcase `backgroundColor`.\n\nTo change an element HTML we can rely on the `innerHTML` property\n\n```javascript\nvar element = document.getElementById('some-section');\n\nelement.innerHTML = ''; // the element with id `some-section` becomes empty\n```\n\nBeware of `getElementsByTagName` and `getElementsByClassName`, these two helper functions are expected to match multiple elements and return a `HTMLCollection`. You may not directly assign property to it. Instead, use a for-loop to iterate over the collection and assign properties to it as shown below.\n\n```javascript\n// incorrect\ndocument.getElementsByTagName('p').style.backgroundColor = '#ff0000';\n\n// correct\nvar elements = document.getElementsByTagName('p');\nfor (var i = 0; i < elements.length; i++) {\n  elements[i].style.backgroundColor = '#ff0000';\n}\n```\n\nFor additional information regarding DOM manipulation please watch [this video](https://youtu.be/FQuwArzGPYo).\n\n### Some useful properties and methods()\n\n`element.addEventListener()`\n\nAttaches an event handler to the specified element\n\n`element.appendChild()`\n\nAdds a new child node, to an element, as the last child node\n\n`element.children`\n\nReturns a collection of an element’s child element (excluding text and comment nodes)\n\n`element.className`\n\nSets or returns the value of the class attribute of an element\n\n`element.click()`\n\nSimulates a mouse-click on an element\n\n`element.clientHeight`\n\nReturns the height of an element, including padding\n\n`element.clientWidth`\n\nReturns the width of an element, including padding\n\n`element.firstChild`\n\nReturns the first child node of an element\n\n`element.getAttribute()`\n\nReturns the specified attribute value of an element node\n\n`element.getElementsByClassName()`\n\nReturns a collection of all child elements with the specified class name\n\n`element.getElementsByTagName()`\n\nReturns a collection of all child elements with the specified tag name\n\n`element.id`\n\nSets or returns the value of the id attribute of an element\n\n`element.innerHTML`\n\nSets or returns the content of an element\n\n`element.insertBefore()`\n\nInserts a new child node before a specified, existing, child node\n\n`element.lastChild`\n\nReturns the last child node of an element\n\n`element.nextSibling`\n\nReturns the next node at the same node tree level\n\n`element.querySelector()`\n\nReturns the first child element that matches a specified CSS selector(s) of an element\n\n`element.querySelectorAll()`\n\nReturns all child elements that matches a specified CSS selector(s) of an element\n\n`element.removeAttribute()`\n\nRemoves a specified attribute from an element\n\n`element.removeChild()`\n\nRemoves a child node from an element\n\n`element.replaceChild()`\n\nReplaces a child node in an element\n\n`element.removeEventListener()`\n\nRemoves an event handler that has been attached with the addEventListener() method\n\n`element.scrollHeight`\n\nReturns the entire height of an element, including padding\n\n`element.scrollWidth`\n\nReturns the entire width of an element, including padding\n\n`element.setAttribute()`\n\nSets or changes the specified attribute, to the specified value\n\n`element.style`\n\nSets or returns the value of the style attribute of an element\n\n`element.textContent`\n\nSets or returns the textual content of a node and its descendants\n\nA complete list can be found [here](https://www.w3schools.com/jsref/dom_obj_all.asp)\n\n## Exercise\n\nI\n\nWrite a function that takes one parameter which represents a class name. The function should return an array with all elements that have the class name.\n\nThe output of the function should be similar to this, an array of all the elements with the class name we pass to the function:\n\nJ\n\nWrite a function that takes an id as a parameter, it should look for an element with that id and remove all it’s child elements.\n"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"fileAbsolutePath":"/Users/Andy/Desktop/code/PROJECTS/xccelerate/ptcb-site/src/data/week_4/document-object-model.html.turndown.md","title":"document object model"}}}