{"componentChunkName":"component---src-templates-handout-js","path":"/handout/objects","webpackCompilationHash":"055cb08b7c315d851235","result":{"data":{"markdownRemark":{"rawMarkdownBody":"# Objects in JavaScript\n\n## Learning objectives\n\n- Explore what an object in JavaScript is, how it is created and its notation.\n- Understand the difference between dot-notation and bracket-notation\n- Create objects and access object properties\n- Access properties of nested objects\n\n---\n\n## Objects\n\nPreviously, we coded variables that have stored strings, numbers, booleans, arrays and functions.\n\nWhat happens when we want a variable to store much more information about the “thing” that the variable represents? For example, if you were a variable and we wanted to store information about you (your name, your course, your enrollment status) in the single variable `xccelerateStudent` - we’d need more than a single string or a single array, we’d need an object!\n\nWhile variables are containers for a value, objects are containers for many values. Objects are a collection of properties and methods.\n\n```js\nvar xccelerateStudent = {\n  name: 'Olivia Cheung', // name is the PROPERTY or KEY and \"Olivia Cheung\" is the VALUE\n  course: 'Full immersive web dev', // name and course have STRING VALUES\n  enrollmentStatus: true, // the value of enrollmentStatus is a BOOLEAN\n  greet: function() {\n    // greet is a METHOD, more on this later\n    return 'Hello!';\n  }\n};\n```\n\nLet’s take a look at how this object is defined. We have our variable `xccelerateStudent`.\n\n- We assign it the value of an object by using the curly braces, { }.\n  This is called literal notation.\n\n- Inside the curly braces are four properties for our `xccelerateStudent` object: name, course, enrollment status, and greet.\n\n- Every property of a JavaScript object consists of a key-value pair.\n\n- The key is the variable that describes the kind of information to be stored.  \n  The value is the specific value of the key\n\n- Each key-value pair is separated by a colon.  \n  And pairs are separated from each other with a comma.\n\n---\n\n## Properties\n\n#### Dot Notation\n\nYou can access the properties of an object with a dot-notation: `objectName.propertyName`\n\n```js\nvar xccelerateInstructor = {\n  name: 'Jyoti Gupta'\n};\n\nxccelerateInstructor.name; // this returns \"Jyoti Gupta\"\n```\n\n#### Bracket Notation\n\nYou can access the properties of an object with a bracket-notation: `objectName['propertyName']`\n\n```js\nvar xccelerateInstructor = {\n  name: \"Sam O'Shaughnessy\"\n};\n\nxccelerateInstructor['name']; // this returns \"Sam O'Shaughnessy\"\n```\n\nBracket-notation allows you to create properties with spaces, and is the only way to access a property that has spaces.\n\n---\n\n###### Quiz \n\n> “We want to now record that Sam O'Shaughnessy’s favourite language is JavaScript.  \n> How would you add the property `favourite language` with the value `JavaScript` to the `xccelerateInstructor`object?”\n\n_Notice the space in-between `favourite` and `language`._\n\n_Bracket-notation would enable you to do this…_\n\n```js\nxccelerateInstructor['favourite language'] = 'JavaScript';\n```\n\n---\n\n## Some key points\n\n- Each key and value needs to be separated with a colon `:`\n- Each key-value pair should be separated with a comma `,` and ideally be on a new line\n- Like all JavaScript variables, both the object name and property name are case sensitive.\n- Properties that haven’t been assigned to an object return undefined (and not null).\n\n\n    xccelerateInstructor.favouriteDrink; // this returns undefined\n\n---\n\n## Methods\n\nMethods are functions stored within an object. They have a function name (the method name) and the function itself.\n\n```js\nvar drumbeats = 0;\nvar drumkit = {\n  bass: function() {\n    drumbeats++;\n    return 'the drum goes boom!';\n  },\n  cymbals: function() {\n    drumbeats++;\n    return 'the cymbals go clang!';\n  }\n};\n\ndrumkit.bass(); // when you run drumkit.bass() it will add one to the drumbeats variable\n// and return \"the drum goes boom!\"\ndrumbeats;\n// returns 1 , drumbkit.bass() has caused drumbeats to increase by one\ndrumkit.cymbals();\n// return \"the cymbals go clang!\"\ndrumbeats;\n// returns 2 , drumbkit.cymbals() has caused drumbeats variable to increase by one again\n```\n\n---\n\n## Creating objects\n\nYou can create your own objects in three main ways.\n\n- You can create an object using literal notation. `e.g. var xccelerateStudent1 = {}`\n\n- Or with an object initializer. `e.g. var myObj = Object()`\n\n- Alternatively, you can first create a constructor function with the new keyword `e.g. var myCar = new Object()`\n\nLiteral notation as it is the most common way of creating objects so let’s focus on learning this way first. Here’s an example:\n\n```js\nvar baby = {\n  hairColor: 'brown',\n  months: 8,\n  gender: 'female'\n};\n\n// after we've declared (created) the variable baby, we can access the properties.\n// Remember var is only needed when we declare variables.\nbaby.hairColor; // \"brown\"\nbaby.months; // 8\n```\n\nHere’s a quick example of the use of the constructor function to make a new object.\n\n```js\nvar myCar = new Object();\nmyCar.make = 'Ford';\nmyCar.model = 'Mustang';\nmyCar.year = 1969;\n\nconsole.log(myCar); // {make: 'Ford', model: 'Mustang', year: 1969}\n```\n\n### Adding and accessing properties\n\nYou can access and add properties to an object either through dot notation or bracket notation.\n\n```js\nvar obj = {};\n\n// adding properties\nobj.property = 'something'; // dot notation\nobj['otherProperty'] = 'something else'; // bracket notation\nobj.method = function() {\n  return 'something else again';\n};\n\n// Accessing object properties and methods\nobj['property']; // \"something\"\nobj.otherProperty; // \"something else\"\nobj.method(); // \"something else again\"\n```\n\n### Deleting properties\n\nTo delete an object property use the `delete` operator\n\n```js\nvar person = {\n  height: 175,\n  weight: 65\n};\n\ndelete person.height;\n```\n\n### Examples of nested objects\n\nGiven the ourClass object, how can we return jimmy’s background and corah’s studied property?\n\n```js\nvar ourClass = {\n  students: {\n    jimmy: {\n      background: 'accountant',\n      studied: 'USA'\n    },\n    corah: {\n      background: 'student',\n      studied: 'HK'\n    }\n  }\n};\n```\n\nWe can go one level into ourClass object by accessing the students property\n\n```js\n//ourClass.students or ourClass['students'], returns\n{\n  jimmy: {\n    background: 'accountant',\n    studied: 'USA'\n  },\n  corah: {\n    background: 'student',\n    studied: 'HK'\n  }\n}\n```\n\nWe can dive one level deeper by specifying jimmy or corah\n\n```js\n//ourClass.students.jimmy or ourClass['students']['jimmy'], returns\njimmy: {\n  background: 'accountant',\n  studied: 'USA'\n}\n\n//ourClass.students.corah or ourClass['students']['corah'], returns\ncorah: {\n  background: 'student',\n  studied: 'HK'\n}\n```\n\nFinally we can get the most deeply nested properties by specifying background or studied\n\n```js\nourClass.students.jimmy.background; // returns \"accountant\" using dot-notation\nourClass['students']['corah']['studied']; // returns \"HK\" using bracket-notation\nourClass['students'].jimmy['studied']; // returns \"USA\" using a mix of dot and bracket notation\n```\n\n---\n\n## Exercises\n\nG\n\nGiven the asia object, how would you access the following …\n\n1. Mumbai’s population\n2. Beijing’s population\n3. Hong Kong’s population\n\n```js\nvar asia = {\n  countries: {\n    India: {\n      Mumbai: {\n        population: 18.5\n      }\n    },\n    China: {\n      Beijing: {\n        population: 21.5\n      },\n      'Hong Kong': {\n        population: 7.3\n      }\n    }\n  }\n};\n```\n\nConsider the different ways to access the information, in a js document type out the code needed to access these nested properties.\n\nGiven the object familyBankValues, how would you access:\n\n4. Mothers account number\n\n5. Fathers accountBalance\n\n6. Step brothers account number and account, store the information into a variable which is an array.\n\n```js\nvar familyBankValues = {\n  familyMembers: {\n    Mother: {\n      'account number': 8096291,\n\n      accountBalance: 10000000\n    },\n\n    Father: {\n      'account number': 8096292,\n\n      accountBalance: 9999999\n    },\n\n    Sister: {\n      'account number': 8096293,\n\n      accountBalance: 10000\n    },\n\n    'Step Brother': {\n      'account number': 8096292,\n\n      accountBalance: 15000\n    }\n  }\n};\n```\n\nHint for 6: First declare a variable, give the variable a name and set the value of this variable to an array that contains the information we asked for above.\n"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"fileAbsolutePath":"/Users/Andy/Desktop/code/PROJECTS/xccelerate/ptcb-site/src/data/week_3_objects/objects.html.turndown.md","title":"objects"}}}