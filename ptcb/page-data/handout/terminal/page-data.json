{"componentChunkName":"component---src-templates-handout-js","path":"/handout/terminal","webpackCompilationHash":"2da5a878e60b2f0b9e92","result":{"data":{"markdownRemark":{"rawMarkdownBody":"\n# The terminal\n\nAs a person new to programming, using the terminal interface of a computer may be something you’ll do for the first time in this lesson.\n\nWe often access computer programs through their Graphical User Interface or GUI. This is simply the visual component of a computer program. For example, word processing programs, such as Microsoft Word, generally have a GUI that contains a white area for us to type in, a cursor to show where we are typing, and a variety of buttons, menus, and options to edit our work. This is a GUI. Another example is an email inbox that displays each email’s details, allows us to open an email by clicking on its subject line, and offers buttons to reply and format text.\n\nHowever, when we are developing we will often use our devices’ terminal interface. The terminal is a text-based interface that allows a user to interact with the computer by entering commands on a command line. You have probably navigated through the folders and files on your device using a GUI tool such as Finder on a Mac or Explore on Windows. In this lesson, we’ll explore how we can create, update, delete and navigate our folders and files using the terminal interface. We’ll also see how using the terminal gives us access to other commands that we do not have when using the GUI tools our computers provide.\n\n## Opening the terminal\n\nOn Mac/Linux open ‘terminal’.\n\nIf you are using Windows 10 , you are required to use Bash on Ubuntu on Windows. The instructions for installing Bash on Ubuntu can be found on the following [link](https://msdn.microsoft.com/en-us/commandline/wsl/install_guide).\n\nFrom this point onwards, we are only going to refer `Bash on Ubuntu on Windows` as `Windows`. We expect you to understand that all commands should be run in `bash` instead of normal `cmd` application.\n\nIf you are using windows 8 or below, please install a Ubuntu Virtual Machine (VM) on Windows instead.\n\nYou will now see a new window to the inside of your computer. It might look a bit intimidating at the beginning, but it is a lot simpler to navigate then using the GUI once you get used to it.\n\n### Let’s create a directory (folder)\n\nWhen using a GUI, the term ‘folder’ is used to describe a storage space to organize files. On the command line, the term ‘directory’ is used instead. ‘Folder’ and ‘directory’ are essentially the same thing.\n\nYou are currently in your home directory (the highest level of the directory). To double check, you can type `cd ~` and then press enter. You should now see a ‘~’ indicating that you are in your home directory.\n\nFirst, type `ls`. Does anything happen? Not really does it? This is because the command `ls` lists all the files in the current directory, however we haven’t added anything there yet.\n\nNext, type `mkdir code`. The `mkdir` command creates a new directory with the name ‘code’. If you now type `ls`, you should see a new ‘code’ directory.\n\nAfterwards type `cd code` . You should see ‘~’ being replaced with the name ‘code’. `cd` stands for ‘change directory’ which allows us to enter or change directories.\n\n### Let’s add a file\n\nLet’s do this:  \nType `touch index.html` and then type `ls` again. You should see a file with the name ‘index.html’. If you want you can use your GUI to navigate to your code folder and double check that the file really exists.\n\n## Cheat Sheet\n\nThese are some of the basic commands that will help you throughout this course.\n\n```bash\ncd [path] # Change directory\ncd ~ # Home directory, e.g. ‘cd ~/folder/’\nls # List Files in directory\nls -a # Listing incl. hidden files\ntouch [file] # Creates file\ncode [file] # Opens the file in Visual Studio Code\ncode . # Opens the whole directory in Visual Studio Code\ncp [file] [dir] # Copy a file to a directory\nrm [file] # Removes file, be careful with this command!!\nrm -r [directory] # Removes a whole directory with content. Again be extra careful here!!\nsudo [command] # Run command with the security privileges of the\nexit # Exit\nclear # Clear screen\n```\n\n## Special for Windows\n\nOn Windows, the drives are mounted in a special location `/mnt/`. For example , C Drive is mounted on `/mnt/c` and D drive is mounted on `/mnt/d`. You can access the your windows files in C Drive by using the following commands:\n\n```bash\n# Change Directory to C Drive\ncd  /mnt/c\n\n# List all the files.\nls -al\n```\n\nOptional: if you don’t want to access your C-Drive every time by the path `/mnt/c`. You can run the following commands to create a symbolic link in your home directory.\n\n```bash\ncd ~\nln -s /mnt/c\ncd ~/c\n# Now in the path of /mnt/c\n```\n\nFrom now on , if you are trying to install any command line based applications like `nodejs`, `git` or `ngrok`, you should always use ubuntu to install the software.\n\nOn the other hand, if you are installing graphical applications (such as `Visual Studio Code` or `Slack`), you should use windows to install the software.\n\n### Where do I place my code?\n\nFor windows, you are not supposed to use windows application to modify the files in ubuntu bash. Therefore , we strongly advise you to keep your code in a directory in the folder `/mnt/c/` such that you can access the files from both windows application and ubuntu bash shell.\n\n## Extra reading about the command line\n\nYou can read more in [here](https://blogs.msdn.microsoft.com/commandline/2016/11/17/do-not-change-linux-files-using-windows-apps-and-tools/) why it is not advised to use windows application to modify the files in ubuntu bash.\n"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"fileAbsolutePath":"/Users/Andy/Desktop/code/PROJECTS/xccelerate/ptcb-site/src/data/week_1/terminal.html.turndown.md","title":"terminal"}}}